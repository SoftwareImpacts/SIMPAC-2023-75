Tutorial
========

**Section contents**
In this section, we introduce methods and functionalities of the dicomhandler package. Its goal is to *handle* and *convert* patient data, that is 
in DICOM (Digital Imaging and Communications in Medicine) format. 
Our package can save three DICOM files that correspond to the Patient: 

| 1. RT Dose (Radiotherapy Dose) : contains the Patient dose distributions calculated by radiotherapy treatment planning systems.

| 2. RT Plan (Radiotherapy Plan) : contains the Patient treatment plans generated by manual entry, a virtual simulation system, or a treatment planning system before or during a course of treatment. 

| 3. RT Structure (Radiotherapy Structure) : contains Patient structures and related data defined on CT scanners, virtual simulation workstations, treatment planning systems and similar devices. 

--------------
Handling DICOM
--------------
In this subsection, we speak about how this package *handles* the RT Structure of a Patient. The functions that handle this type of DICOM file are *anonymize*, *add_margin*, *rotate* and *translate*.

1. After the installation of the package, open a terminal.

2. Run the command::

      $ ipython
            
3. Run the following code for reading the DICOM RT Structure of the Patient::

      >>> import os
      >>> from  dicomhandler.dicom_info import Dicominfo
      >>> import pydicom
   
      >>> path = os.getcwd() # directory in which we open the terminal, so the dicomhandler folder directory
      >>> structure_path = str(path) + '/docs/source/tutorial/datasets/structure/RS_0.dcm' # directory of the DICOM RT Structure
      >>> patient_struct = pydicom.dcmread(structure_path) 
   
4. Now, we create a Dicominfo object with the structure information of the Patient::

      >>> di = Dicominfo(patient_struct)
      
5. A important method of our package is the *anonymize*. With it, we can anonymize the private information of the patient such as the name, birthday, operator and creation::

      >>> di_anony = di.anonymize(name=True, birth=True, operator=True, creation=True)
      >>> print(di.PatientName) # print the real name of the Patient
      >>> print(di_anony.PatientName) 
   
6. The method *add_margin* is used for increasing or decreasing the margin of a structure. This fact is important for medical purposes. For example, we want add 1 mm (float) to the margin of the second structure of the Patient. We can uncommented the two prints for see the difference between the old points and new points for the first slice::

      >>> struct_name = di.dicom_struct.StructureSetROISequence[1].ROIName
      >>> di_add_margin = di.add_margin(struct_name, 1.0)
   
      >>> #print(di.dicom_struct.ROIContourSequence[1].ContourSequence[0].ContourData) #old points of the first slice of the second structure. Remebers that a structure has more slices.
      >>> #print(di_add_margin.dicom_struct.ROIContourSequence[1].ContourSequence[0].ContourData) #new points of the first slice of the second structure. Remebers that a structure has more slices. 
   
7. The method *rotate* is used for making a rotation pitch, yaw and roll of a structure. For example, we want to make a rotation roll of the second structure with 200 degrees::
      
      >>> struct_name = di.dicom_struct.StructureSetROISequence[1].ROIName         
      >>> di_rotate = di.rotate(struct_name, 200.0, 'roll')
      
      >>> #print(di.dicom_struct.ROIContourSequence[1].ContourSequence[0].ContourData) #old points of the first slice of the second structure. 
      >>> #print(di_rotate.dicom_struct.ROIContourSequence[1].ContourSequence[0].ContourData) #new points of the first slice of the second structure.

8. The method *translate* is used for translating a structure along the axes x, y and z. For example, we want to make a translation of 2 mm of the second structure along x::

      >>> struct_name = di.dicom_struct.StructureSetROISequence[1].ROIName         
      >>> di_translate = di.translate(struct_name, 2.0, 'x')
      
      >>> #print(di.dicom_struct.ROIContourSequence[1].ContourSequence[0].ContourData) #old points of the first slice of the second structure. 
      >>> #print(di_translate.dicom_struct.ROIContourSequence[1].ContourSequence[0].ContourData) #new points of the first slice of the second structure.

Obviously, we can call a sequence of the methods *add_margin*, *rotate* and *translate* on a specific structure. 

----------------
Converting DICOM
----------------
In this subsection, we speak about how this package *converts* the RT Structure and RT Plan of a Patient. Extracting information from a DICOM file of type Structure or Plan, is not a easy task. 
The functions that convert this types of DICOM files are *structure_to_excel*, *mlc_to_excel*, *areas_to_dataframe*, *info_to_dataframe* and *report*. 

1. Open a terminal in the folder named 'dicomhandler' 

2. Run the command::

      $ ipython
            
3. Run, line by line, the following code for reading the DICOM RT Structure and DICOM RT Plan of the Patient::

      $ import os
      $ from  dicom_info import Dicominfo
      $ import pydicom
   
      $ path = os.getcwd() # directory in which we open the terminal, so the dicomhandler folder directory
      $ structure_path = str(os.path.dirname(path)) + '/docs/source/tutorial/datasets/structure/RS_0.dcm' # directory of the DICOM RT Structure
      $ plan_path = str(os.path.dirname(path)) + '/docs/source/tutorial/datasets/plan/RP_0.dcm' # directory of the DICOM RT Structure
      $ patient_struct = pydicom.dcmread(structure_path) 
      $ patient_plan = pydicom.dcmread(plan_path)
      
4. Now, we create a Dicominfo object with the structure and plan information of the Patient::

      $ di = Dicominfo(patient_struct, patient_plan)
      
5. The method *structure_to_excel* extract the information of the cartesian coordinates (relative positions) for all or some structures. For example, we want to extract this information for the third structure. The method return a file in the format .xlsx::
      $ struct_name = di.dicom_struct.StructureSetROISequence[2].ROIName
      $ di.structure_to_excel('name_file', names = [struct_name])
      
6. The method *mlc_to_excel* extract the information of the multilead collimator (MLC) positions, control points, gantry angles, gantry orientation and table angle in an .xlsx file. It extracts all the information about the MLC::

      $ di.mlc_to_excel('name_file')

7. The method *areas_to_dataframe* extract information about the movements of the gantry and MLC during radiation. It returns a Pandas dataframe::
        
      $ df_areas = di.areas_to_dataframe()
      
8. The method *info_to_dataframe* extract information about the RT Plan and RT Structure of a patient. It returns a Pandas dataframe that contains all the information in the Plan file and the information of the structures that are specified inside the input list targets. For example, we want a dataframe that contains all the information about the DICOM Plan and the corresponding information in the DICOM Structure::
        
      $ df_struct_plan = di.info_to_dataframe()
      
9. The method *report* makes a comparision between the DICOM Structure of two distinct patients, about a specific structure. For example, about the third structure::
      $ from report import report
      $ path = os.getcwd() # directory in which we open the terminal, so the dicomhandler folder directory
      $ structure_path_1 = str(os.path.dirname(path)) + '/docs/source/tutorial/datasets/structure/RS_0.dcm' # directory of the DICOM RT Structure
      $ structure_path_2 = str(os.path.dirname(path)) + '/docs/source/tutorial/datasets/structure/RS_1.dcm'
      $ patient_struct_1 = pydicom.dcmread(structure_path_1)
      $ patient_struct_2 = pydicom.dcmread(structure_path_2)
      $ struct_name = di.dicom_struct.StructureSetROISequence[2].ROIName
      $ di_1 = Dicominfo(patient_struct_1)
      $ di_2 = Dicominfo(patient_struct_2)
      $ report(di_1, di_2, struct_name)
